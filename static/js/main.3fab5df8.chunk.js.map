{"version":3,"sources":["Components/AnimatedGalaxyGenerator.js","Shaders/VertexShaders.js","Shaders/FragmentShaders.js","App.js","reportWebVitals.js","index.js"],"names":["GalaxyGenerator","scene","THREE","gui","dat","closed","size","width","window","innerWidth","height","innerHeight","cursor","x","y","addEventListener","event","clientX","clientY","parameters","geometry","material","points","generateGalaxy","dispose","remove","positions","Float32Array","count","colors","scales","randomNess","colorInside","insideColor","colorOutside","outsideColor","i","i3","radius","Math","random","branchAngle","branches","PI","cos","sin","randomX","pow","randomnessPower","randomY","randomZ","mixedColor","clone","lerp","r","g","b","setAttribute","depthWrite","blending","vertexColors","vertexShader","fragmentShader","uniforms","uTime","value","uSize","renderer","getPixelRatio","add","min","max","step","onFinishChange","addColor","camera","position","set","aspect","updateProjectionMatrix","setSize","setPixelRatio","devicePixelRatio","canvas","document","querySelector","controls","OrbitControls","enableDamping","clock","tick","elapsedTime","getElapsedTime","update","render","requestAnimationFrame","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3fab5df8.chunk.js","sourcesContent":["import * as THREE from 'three';\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport * as dat from 'dat.gui';\r\nimport { vertexShaders } from '../Shaders/VertexShaders';\r\nimport { fragmentShaders } from '../Shaders/FragmentShaders';\r\n\r\nconst GalaxyGenerator = () => {\r\n\r\n    const scene = new THREE.Scene();\r\n\r\n    const gui = new dat.GUI({ closed: true });\r\n\r\n    const size = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    };\r\n\r\n    const cursor = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n    window.addEventListener('mousemove', (event) => {\r\n        cursor.x = event.clientX / size.width - 0.5;\r\n        cursor.y = event.clientY / size.height - 0.5;\r\n    });\r\n\r\n    /*\r\n    * Galaxy\r\n    */\r\n    const parameters = {};\r\n    parameters.count = 300000;\r\n    parameters.size = 0.01;\r\n    parameters.radius = 7;\r\n    parameters.branches = 5;\r\n    // parameters.spin = 1;\r\n    parameters.spin = 0;\r\n    // parameters.randomness = 0.02;\r\n    parameters.randomnessPower = 3;\r\n    parameters.insideColor = '#ff6030';\r\n    parameters.outsideColor = '#1b3984';\r\n\r\n    let geometry = null;\r\n    let material = null;\r\n    let points = null;\r\n\r\n\r\n\r\n    const generateGalaxy = () => {\r\n\r\n        /*\r\n        * Destroy old galaxy\r\n        **/\r\n        if(points !== null){\r\n            geometry.dispose();\r\n            material.dispose();\r\n            scene.remove(points);\r\n        }\r\n         geometry = new THREE.BufferGeometry();\r\n\r\n        const positions = new Float32Array(parameters.count * 3);\r\n        const colors = new Float32Array(parameters.count * 3) // we need 3 colors for RGB\r\n        const scales = new Float32Array(parameters.count * 1);\r\n        const randomNess = new Float32Array(parameters.count * 3);\r\n        \r\n        const colorInside = new THREE.Color(parameters.insideColor)\r\n        const colorOutside = new THREE.Color(parameters.outsideColor)\r\n\r\n        for (let i = 0; i < parameters.count; i++) {\r\n            const i3 = i * 3;\r\n\r\n            /* Positions */\r\n            const radius = parameters.radius * Math.random();\r\n            // const spinAngle = radius * parameters.spin\r\n            const branchAngle = ((i % parameters.branches) / parameters.branches ) * 2 * Math.PI;\r\n\r\n            \r\n            positions[i3    ] = Math.cos(branchAngle) * radius; // x - axis\r\n            positions[i3 + 1] = 0; // y - axis\r\n            positions[i3 + 2] = Math.sin(branchAngle) * radius;  // z - axis\r\n\r\n            const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\r\n            const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\r\n            const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\r\n            \r\n            randomNess[i3 + 0] = randomX;\r\n            randomNess[i3 + 1] = randomY;\r\n            randomNess[i3 + 2] = randomZ;\r\n            \r\n            /* Colors*/\r\n            const mixedColor = colorInside.clone();\r\n            mixedColor.lerp(colorOutside, radius / parameters.radius);\r\n            colors[i3    ] = mixedColor.r;  // R\r\n            colors[i3 + 1] = mixedColor.g;  // G\r\n            colors[i3 + 2] = mixedColor.b;  // B\r\n\r\n            /* Scale */\r\n            scales[i] = Math.random();\r\n        }\r\n\r\n        geometry.setAttribute(\r\n            'position',\r\n            new THREE.BufferAttribute(positions, 3)\r\n        );\r\n        geometry.setAttribute(\r\n            'color',\r\n            new THREE.BufferAttribute(colors, 3)\r\n        );\r\n        geometry.setAttribute(\r\n            'aScale',\r\n            new THREE.BufferAttribute(scales, 1)\r\n        );\r\n        geometry.setAttribute(\r\n            'aRandomNess',\r\n            new THREE.BufferAttribute(randomNess, 3)\r\n        );\r\n\r\n        /*\r\n        * Material\r\n        **/\r\n        material = new THREE.ShaderMaterial({\r\n            // size: parameters.size,\r\n            // sizeAttenuation: true,\r\n            depthWrite: false,\r\n            blending: THREE.AdditiveBlending,\r\n            vertexColors: true,\r\n            vertexShader: vertexShaders,\r\n            fragmentShader: fragmentShaders,\r\n            uniforms:{\r\n                uTime: { value: 0 },\r\n                uSize: { value: 30 * renderer.getPixelRatio() }\r\n            }\r\n        });\r\n\r\n        /*\r\n        * Particles\r\n        */\r\n        points = new THREE.Points(geometry, material);\r\n        scene.add(points);\r\n\r\n    };\r\n\r\n\r\n    /* debug GUI\r\n    */\r\n    gui.add(parameters, 'count').min(100).max(1000000).step(100).onFinishChange(generateGalaxy);\r\n    gui.add(parameters, 'size').min(0.001).max(0.1).step(0.001).onFinishChange(generateGalaxy);\r\n    gui.add(parameters, 'radius').min(1).max(20).step(0.1).onFinishChange(generateGalaxy);\r\n    gui.add(parameters, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy);\r\n    // gui.add(parameters, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy);\r\n    // gui.add(parameters, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy);\r\n    gui.add(parameters, 'randomnessPower').min(1).max(10).step(0.001).onFinishChange(generateGalaxy);\r\n    gui.addColor(parameters, 'insideColor').onFinishChange(generateGalaxy);\r\n    gui.addColor(parameters, 'outsideColor').onFinishChange(generateGalaxy);\r\n\r\n\r\n    const camera = new THREE.PerspectiveCamera(70, size.width / size.height, 0.1, 100)\r\n    camera.position.set(3, 4, 3);\r\n    scene.add(camera);\r\n\r\n    window.addEventListener('resize', () => {\r\n\r\n        size.width = window.innerWidth;\r\n        size.height = window.innerHeight;\r\n\r\n        camera.aspect = size.width / size.height;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(size.width, size.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    });\r\n\r\n    const canvas = document.querySelector('.webgl');\r\n\r\n    const controls = new OrbitControls(camera, canvas);\r\n    controls.enableDamping = true;\r\n\r\n    const renderer = new THREE.WebGLRenderer({\r\n        canvas: canvas\r\n    });\r\n\r\n    renderer.setSize(size.width, size.height);\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n    const tick = () => {\r\n        const elapsedTime = clock.getElapsedTime();\r\n\r\n        // animate galaxy\r\n        material.uniforms.uTime.value = elapsedTime;\r\n\r\n        // points.rotation.y = elapsedTime * 0.05 * parameters.spin;\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        window.requestAnimationFrame(tick);\r\n    };\r\n\r\n    /* Generate galaxy */\r\n    generateGalaxy();\r\n\r\n    /* Animate */\r\n    tick();\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GalaxyGenerator;","export const vertexShaders = `\r\n\r\nuniform float uSize;\r\nuniform float uTime;\r\n\r\nattribute float aScale;\r\nattribute vec3 aRandomNess;\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main(){\r\n\r\n    /* postions */\r\n\r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n\r\n    /* Spin */\r\n    float angle = atan(modelPosition.x, modelPosition.z);\r\n    float distanceToCenter = length(modelPosition.xz);\r\n    float angleOffset = ( 1.0 / distanceToCenter ) * uTime * 0.2;\r\n    angle += angleOffset;\r\n    modelPosition.x = cos(angle) * distanceToCenter;\r\n    modelPosition.z = sin(angle) * distanceToCenter;\r\n\r\n    /* Randomness */\r\n    // or modelPosition.xyz += aRandomNess;\r\n    modelPosition.x += aRandomNess.x;\r\n    modelPosition.y += aRandomNess.y;\r\n    modelPosition.z += aRandomNess.z;\r\n\r\n\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectionPosition = projectionMatrix * viewPosition;\r\n    gl_Position = projectionPosition;\r\n\r\n    /* Size */\r\n    gl_PointSize = uSize * aScale;\r\n    \r\n    // we set sizeAttenuation on our own, since shaderMaterial doesn't support sizeAttenuation = true like pointMaterial\r\n    gl_PointSize *= ( 1.0 / - viewPosition.z);  \r\n\r\n\r\n\r\n    vColor = color;\r\n\r\n\r\n    \r\n\r\n}\r\n\r\n`","export const fragmentShaders = `\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main(){\r\n\r\n    /* Disc pattern */\r\n    // float strength = distance(gl_PointCoord, vec2(0.5));\r\n    // strength = step(0.5, strength);\r\n    // strength = 1.0 - strength;\r\n\r\n    /* Diffuse Point pattern*/\r\n    // float strength = distance(gl_PointCoord, vec2(0.5));\r\n    // strength *= 2.0 ;\r\n    // strength = 1.0 - strength;\r\n\r\n    /* Light Point pattern*/\r\n    float strength = distance(gl_PointCoord, vec2(0.5));\r\n    strength = 1.0 - strength;\r\n    strength = pow(strength, 10.0);\r\n\r\n\r\n    /* Final Color */\r\n    vec3 color = mix(vec3(0.0), vColor, strength);\r\n\r\n    // we cannot send uv as a varying because each vertex is a particle but we can use gl_PointCoord\r\n    gl_FragColor = vec4(color, 1.0);\r\n\r\n}\r\n\r\n`","import './App.css';\nimport GalaxyGenerator from './Components/AnimatedGalaxyGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GalaxyGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}